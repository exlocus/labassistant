import logging
from scipy import constants
import numpy as np
import matplotlib.pyplot as plt
import os
import math
import asyncio
import aiohttp
import sqlite3
from datetime import datetime
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import State, StatesGroup, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram import F

logging.basicConfig(level=logging.INFO)

API_TOKEN = "8160270004:AAHpWYhTBpOQ7MGbr5s4z9fk8mm-_l-ZrLU"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher()

user_feedback_index = {}
user_data = {}

class Form(StatesGroup):
    waiting_for_conversion_input = State()
    waiting_for_spectrum_analysis_input = State()
    waiting_for_wavelength_input = State()
    waiting_for_fluence_calculation_average_power_input = State()
    waiting_for_fluence_calculation_repetition_rate_input = State()
    waiting_for_fluence_calculation_spot_diameter_input = State()
    waiting_for_feedback_type_default_accept = State()
    waiting_for_feedback_type_anon_accept = State()
    waiting_for_feedback_confirmation = State()
    waiting_for_feedback_anon_confirmation = State()
    waiting_for_mass_mail_message_input = State()
    waiting_for_mass_mail_photo_input = State()

def db_start():
    conn = sqlite3.connect('feedback.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS feedback (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      username TEXT,
                      message TEXT,
                      is_anonymous INTEGER,
                      created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )
    ''')
    conn.commit()
    conn.close()

def save_feedback(user_id, username, message, is_anonymous):
    conn = sqlite3.connect('feedback.db')
    cursor = conn.cursor()
    created_at = datetime.now()
    cursor.execute("INSERT INTO feedback (user_id, username, message, is_anonymous, created_at) VALUES (?, ?, ?, ?, ?)", 
                   (user_id, username, message, is_anonymous, created_at))
    conn.commit()
    conn.close()

def delete_feedback(feedback_id):
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID."""
    conn = sqlite3.connect("feedback.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM feedback WHERE id = ?", (feedback_id,))
    conn.commit()
    conn.close()

def load_all_feedback():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect("feedback.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id, username, message, is_anonymous, created_at FROM feedback")
    feedbacks = cursor.fetchall()
    conn.close()

    feedback_list = [
        {
            "id": row[0],
            "user_id": row[1],
            "username": row[2],
            "message": row[3],
            "is_anonymous": row[4],
            "created_at": row[5]
        }
        for row in feedbacks
    ]
    return feedback_list

async def download_file(bot, file_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ file_id —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp"""
    file_info = await bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as response:
            if response.status == 200:
                return await response.read()
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {response.status}")

async def delete_previous_message(message: types.Message):
    try:
        await message.delete()
    except Exception:
        pass

async def calculate_conversion(user_input: str, message: Message):
    try:
        user_id = message.from_user.id
        user_info = user_data.get(user_id, {})
        value_type = user_info.get("value_type_for_conversion")
        value = float(user_input)
        buttons = [
            [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        if value_type == "frequency":
            frequency_hz = value * 1e12
            wavelength_nm = (constants.c / frequency_hz) * 1e9
            energy_eV = (constants.h * frequency_hz) / constants.e
            await message.answer(f"üåä –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã: {wavelength_nm:.2f} –Ω–º\n‚ö° –≠–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞: {energy_eV:.2f} —ç–í", reply_markup=keyboard)
        elif value_type == "wavelength":
            wavelength_m = value * 1e-9
            frequency = constants.c / wavelength_m
            frequency_tHz = frequency * 1e-12
            energy_eV = (constants.h * frequency) / constants.e
            await message.answer(f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {frequency_tHz:.2f} –¢–ì—Ü\n‚ö° –≠–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞: {energy_eV:.2f} —ç–í", reply_markup=keyboard)
        elif value_type == "energy":
            energy_J = value * constants.e
            frequency = energy_J / constants.h
            wavelength_nm = (constants.c / frequency) * 1e9
            frequency_tHz = frequency * 1e-12
            await message.answer(f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {frequency_tHz:.2f} –¢–ì—Ü\nüåä –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã: {wavelength_nm:.2f} –Ω–º", reply_markup=keyboard)
        else:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        del user_data[user_id]
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except ZeroDivisionError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫—Ä–æ–º–µ –Ω—É–ª—è).")
async def analyze_spectrum(file_data, message: Message):
    try:
        data = np.loadtxt(file_data)
        wavelengths = data[:, 0]
        intensities = data[:, 1]

        peak_index = np.argmax(intensities)
        peak_wavelength = wavelengths[peak_index]
        peak_intensity = intensities[peak_index]

        half_max = peak_intensity / 2

        left_half_max_index = np.where(intensities[:peak_index] <= half_max)[0][-1]
        left_half_max_wavelength = wavelengths[left_half_max_index]

        right_half_max_index = np.where(intensities[peak_index:] <= half_max)[0][0] + peak_index
        right_half_max_wavelength = wavelengths[right_half_max_index]

        fwhm = right_half_max_wavelength - left_half_max_wavelength

        plt.figure(figsize=(10, 6))
        plt.plot(wavelengths, intensities, label='–°–ø–µ–∫—Ç—Ä', color='b')
        plt.axhline(half_max, color='grey', linestyle='--', label='–ü–æ–ª–æ–≤–∏–Ω–∞ –º–∞–∫—Å–∏–º—É–º–∞')
        plt.plot(peak_wavelength, peak_intensity, 'ro', label=f'–ü–∏–∫ –ø—Ä–∏ {peak_wavelength:.2f} –Ω–º')
        plt.plot([left_half_max_wavelength, right_half_max_wavelength], [half_max, half_max], 'go-', label=f'–ü–æ–ª—É—à–∏—Ä–∏–Ω–∞ = {fwhm:.2f} –Ω–º')

        plt.xlabel('–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º)')
        plt.ylabel('–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (–∞.–µ.)')
        plt.title('–°–ø–µ–∫—Ç—Ä —Å –ø–∏–∫–æ–º –∏ –ø–æ–ª—É—à–∏—Ä–∏–Ω–æ–π')
        plt.legend()
        plt.grid(True)
        plt.savefig("spectrum_analysis.png")

        buttons = [
            [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        current_directory = os.getcwd()
        input_file = FSInputFile(os.path.join(current_directory, "spectrum_analysis.png"))
        await message.answer_photo(input_file, caption=f"–†–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–π –ø–∏–∫: {peak_wavelength:.2f} –Ω–º\n–®–∏—Ä–∏–Ω–∞ –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ: {fwhm:.2f} –Ω–º", reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–µ–∫—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")

async def fluence_calculation(message: Message):
    user_id = message.from_user.id
    diameter_mm = float(message.text)
    diameter_cm = diameter_mm / 10
    area_cm2 = math.pi * (diameter_cm / 2) ** 2
    user_data[user_id]["spot_area"] = area_cm2
    user_data[user_id]["step"] = "calculate"

    power = user_data[user_id]["average_power"]
    rate = user_data[user_id]["repetition_rate"]
    area = user_data[user_id]["spot_area"]
    fluence = power / (rate * area)
    
    buttons = [
        [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(f"–§–ª—é–µ–Ω—Å –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {fluence:.3e} –î–∂/—Å–º¬≤", reply_markup=keyboard)
    del user_data[user_id]

@dp.message(Command("start"))
async def start_handler(message: Message, user_id2: int = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –Ω–∞—É—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üî¨.\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n"
        "1. üîÑ –ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–æ—Ç—ã/—ç–Ω–µ—Ä–≥–∏–∏ –≤ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã\n"
        "2. üìè –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª–∏–Ω –≤–æ–ª–Ω\n"
        "3. üìä –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞\n"
        "4. üî• –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–ª—é–µ–Ω—Å–∞\n"
        "5. üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
    )

    buttons = [
        [types.InlineKeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ", callback_data="calc")],
        [types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù", callback_data="feedback")]
    ]

    if user_id2 == 1094169323 and user_id2 != None:
        buttons.append([types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚öôÔ∏è", callback_data="admin_panel")])
    elif message.from_user.id == 1094169323:
        buttons.append([types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚öôÔ∏è", callback_data="admin_panel")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery):
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    await start_handler(callback.message, user_id)

@dp.callback_query(F.data == "admin_panel")
async def admin_panel_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    await delete_previous_message(callback.message)
    admin_text = (
        "üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )

    admin_buttons = [
        [types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã üìã", callback_data="view_feedback")],
        [types.InlineKeyboardButton(text="–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ üì¢", callback_data="mass_mail")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_start")]
    ]
    admin_keyboard = types.InlineKeyboardMarkup(inline_keyboard=admin_buttons)
    await callback.message.answer(admin_text, reply_markup=admin_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "view_feedback")
async def view_feedback_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤."""
    user_id = callback.from_user.id
    feedback_list = load_all_feedback()
    if not feedback_list:
        await delete_previous_message(callback.message)
        buttons = [
            [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. üì≠", reply_markup=keyboard)
        return

    user_feedback_index[user_id] = 0
    await show_feedback(callback.message, feedback_list, user_id)

async def show_feedback(message, feedback_list, user_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await delete_previous_message(message)
    current_index = user_feedback_index.get(user_id, 0)
    feedback = feedback_list[current_index]

    feedback_message = (
        f"–û—Ç–∑—ã–≤ –æ—Ç {feedback['username'] or '–ê–Ω–æ–Ω–∏–º'} (id{feedback['user_id'] or "'—Å–∫—Ä—ã—Ç'"}):\n\n"
        f"–ù–∞–ø–∏—Å–∞–Ω {feedback['created_at']}\n"
        f"–¢–∏–ø –æ—Ç–∑—ã–≤–∞: {'–ê–Ω–æ–Ω–∏–º–Ω—ã–π üë§' if feedback['is_anonymous'] else '–û–±—ã—á–Ω—ã–π üòÄ'}\n\n"
        f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:\n{feedback['message']}\n\n"
        f"–û—Ç–∑—ã–≤ {current_index + 1} –∏–∑ {len(feedback_list)}"
    )

    buttons = [
        [
            types.InlineKeyboardButton(text="‚óÄ", callback_data="prev_feedback"),
            types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data="mark_as_read"),
            types.InlineKeyboardButton(text="‚ñ∂", callback_data="next_feedback")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(feedback_message, reply_markup=keyboard)

@dp.callback_query(F.data == "next_feedback")
async def next_feedback_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤."""
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    feedback_list = load_all_feedback()
    if not feedback_list:
        await callback.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    user_feedback_index[user_id] = (user_feedback_index[user_id] + 1) % len(feedback_list)
    await show_feedback(callback.message, feedback_list, user_id)

@dp.callback_query(F.data == "prev_feedback")
async def prev_feedback_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∑—ã–≤."""
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    feedback_list = load_all_feedback()
    if not feedback_list:
        await callback.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    user_feedback_index[user_id] = (user_feedback_index[user_id] - 1) % len(feedback_list)
    await show_feedback(callback.message, feedback_list, user_id)

@dp.callback_query(F.data == "mark_as_read")
async def mark_as_read_handler(callback: types.CallbackQuery):
    """–ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã."""
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    feedback_list = load_all_feedback()
    if not feedback_list:
        await callback.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    current_index = user_feedback_index.get(user_id, 0)
    feedback = feedback_list[current_index]

    delete_feedback(feedback['id'])

    await callback.message.answer("–û—Ç–∑—ã–≤ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏ —É–¥–∞–ª–µ–Ω. ‚úÖ")

    feedback_list = load_all_feedback()
    if not feedback_list:
        buttons = [
            [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("–í—Å–µ –æ—Ç–∑—ã–≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã! üì≠", reply_markup=keyboard)
        user_feedback_index.pop(user_id, None)
    else:
        user_feedback_index[user_id] = current_index % len(feedback_list)
        await show_feedback(callback.message, feedback_list, user_id)

@dp.callback_query(F.data == "mass_mail")
async def start_mass_mail(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_mass_mail_message_input)
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await callback.answer()

@dp.message(StateFilter(Form.waiting_for_mass_mail_message_input))
async def process_message(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    message_text = message.text
    user_id = message.from_user.id

    user_data[user_id] = {"message_text": message_text}

    confirmation_message = (
        f"üîî –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        f"{message_text}\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? ü§î"
    )

    buttons = [
        [types.InlineKeyboardButton(text="–î–∞ üëç", callback_data="confirm_mass_mail")],
        [types.InlineKeyboardButton(text="–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å ‚úèÔ∏è", callback_data="edit_mass_mail")],
        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_mass_mail")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(confirmation_message, reply_markup=keyboard)

@dp.callback_query(F.data == "confirm_mass_mail")
async def proceed_with_mass_mail(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_mass_mail_photo_input)
    await callback.answer()

    buttons = [
        [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©", callback_data="skip_photo")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer('üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ç–æ):', reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "edit_mass_mail")
async def edit_mass_mail(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await delete_previous_message(callback.message)
    await callback.message.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Form.waiting_for_mass_mail_message_input)

@dp.callback_query(F.data == "cancel_mass_mail")
async def cancel_mass_mail(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
    await delete_previous_message(callback.message)
    buttons = [
        [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. ‚ùå", reply_markup=keyboard)
    await state.clear()

@dp.message(StateFilter(Form.waiting_for_mass_mail_photo_input))
async def process_photo(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = message.from_user.id

    message_text = user_data.get(user_id, {}).get("message_text")
    photo = message.photo[-1].file_id

    await send_mass_mail(message, message_text, photo)
    await state.clear()
    buttons = [
        [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=keyboard)

@dp.callback_query(F.data == "skip_photo")
async def skip_photo(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ."""
    user_id = callback.from_user.id

    message_text = user_data.get(user_id, {}).get("message_text")

    await send_mass_mail(callback.message, message_text)
    await state.clear()
    buttons = [
        [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=keyboard)

async def send_mass_mail(message: Message, message_text: str, photo: str = None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')

    for row in cursor.fetchall():
        user_id = row[0]
        try:
            if photo:
                await bot.send_photo(user_id, photo, caption=message_text)
            else:
                await bot.send_message(user_id, message_text)
        except Exception as e:
            print(e)

    conn.close()

@dp.callback_query(F.data == "calc")
async def select_calc_method(callback: types.CallbackQuery):
    await delete_previous_message(callback.message)
    buttons = [
        [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–æ—Ç—ã/—ç–Ω–µ—Ä–≥–∏–∏ üåà", callback_data="convert")],
        [types.InlineKeyboardButton(text="–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª–∏–Ω –≤–æ–ª–Ω üìè", callback_data="wavelength_info")],
        [types.InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ üìä", callback_data="spectrum_analysis")],
        [types.InlineKeyboardButton(text="–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–ª—é–µ–Ω—Å–∞ üî•", callback_data="fluence_calc")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "convert")
async def handle_conversion(callback: types.CallbackQuery):
    await delete_previous_message(callback.message)
    buttons = [
        [types.InlineKeyboardButton(text="–ß–∞—Å—Ç–æ—Ç–∞ (–¢–ì—Ü) üîÑ", callback_data="input_frequency")],
        [types.InlineKeyboardButton(text="–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–Ω–º) üåä", callback_data="input_wavelength")],
        [types.InlineKeyboardButton(text="–≠–Ω–µ—Ä–≥–∏—è (–≠–≤) ‚ö°", callback_data="input_energy")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="calc")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–≤–æ–¥–∞:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "input_frequency")
async def input_frequency(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_conversion_input)
    user_id = callback.from_user.id
    user_data[user_id] = {"value_type_for_conversion": "frequency"}
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É (–ì—Ü):")
    await callback.answer()

@dp.callback_query(F.data == "input_wavelength")
async def input_wavelength(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_conversion_input)
    user_id = callback.from_user.id
    user_data[user_id] = {"value_type_for_conversion": "wavelength"}
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã (–Ω–º):")
    await callback.answer()

@dp.callback_query(F.data == "input_energy")
async def input_energy(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_conversion_input)
    user_id = callback.from_user.id
    user_data[user_id] = {"value_type_for_conversion": "energy"}
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —ç–Ω–µ—Ä–≥–∏—é (–î–∂):")
    await callback.answer()

@dp.message(StateFilter(Form.waiting_for_conversion_input))
async def process_user_input_conversion(message: Message):
    user_input = message.text
    await calculate_conversion(user_input, message)

@dp.callback_query(F.data == "spectrum_analysis")
async def handle_spectrum_analysis(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_spectrum_analysis_input)
    await callback.message.answer("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–ø–µ–∫—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å).")
    await callback.answer()

@dp.message(StateFilter(Form.waiting_for_spectrum_analysis_input))
async def process_user_input_spectrum_analysis(message: Message):
    try:
        file_id = message.document.file_id
        file_data = await download_file(bot, file_id)
        if file_data:
            with open("spectrum.txt", "wb") as f:
                f.write(file_data)

            await analyze_spectrum("spectrum.txt", message)
        else:
            await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except AttributeError:
        await message.answer("üö´ –ü–æ—Ö–æ–∂–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(F.data == "wavelength_info")
async def handle_wavelength_info(callback: types.CallbackQuery):
    await delete_previous_message(callback.message)
    text = (
        "üìè –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –¥–ª–∏–Ω –≤–æ–ª–Ω:\n\n"
        "- –£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç (UV): 100‚Äì400 –Ω–º\n"
        "- –í–∏–¥–∏–º—ã–π —Å–≤–µ—Ç: 400‚Äì700 –Ω–º\n"
        "  - –§–∏–æ–ª–µ—Ç–æ–≤—ã–π: 400‚Äì450 –Ω–º\n"
        "  - –°–∏–Ω–∏–π: 450‚Äì495 –Ω–º\n"
        "  - –ó–µ–ª–µ–Ω—ã–π: 495‚Äì570 –Ω–º\n"
        "  - –ñ–µ–ª—Ç—ã–π: 570‚Äì590 –Ω–º\n"
        "  - –û—Ä–∞–Ω–∂–µ–≤—ã–π: 590‚Äì620 –Ω–º\n"
        "  - –ö—Ä–∞—Å–Ω—ã–π: 620‚Äì700 –Ω–º\n"
        "- –ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–π (IR): 700 –Ω–º –∏ –≤—ã—à–µ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã, –∏ —è –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ—ë –¥–∏–∞–ø–∞–∑–æ–Ω."
    )

    buttons = [
        [types.InlineKeyboardButton(text="üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª–∏–Ω—ã –≤–æ–ª–Ω—ã", callback_data="ask_wavelength")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="calc")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    current_directory = os.getcwd()
    input_file = FSInputFile(os.path.join(current_directory, "wavelength.png"))
    await callback.message.answer_photo(photo=input_file, caption=text, reply_markup=keyboard)

    await callback.answer()

@dp.callback_query(F.data == "ask_wavelength")
async def ask_wavelength_range(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_wavelength_input)
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã (–≤ –Ω–º), –∏ —è —Å–∫–∞–∂—É, –∫ –∫–∞–∫–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è.")
    await callback.answer()

@dp.message(StateFilter(Form.waiting_for_wavelength_input))
async def process_wavelength_input(message: Message):
    try:
        wavelength = float(message.text)
        wavelength_ranges = {
            "ultraviolet": {
                "name": "–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç (UV)",
                "range": (100, 400),
                "description": "–î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 100 –¥–æ 400 –Ω–º, –Ω–µ –≤–∏–¥–∏–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –≥–ª–∞–∑—É."
            },
            "visible": {
                "name": "–í–∏–¥–∏–º—ã–π —Å–≤–µ—Ç",
                "range": (400, 700),
                "description": (
                    "–î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 400 –¥–æ 700 –Ω–º.\n"
                    "- –§–∏–æ–ª–µ—Ç–æ–≤—ã–π: 400‚Äì450 –Ω–º\n"
                    "- –°–∏–Ω–∏–π: 450‚Äì495 –Ω–º\n"
                    "- –ó–µ–ª–µ–Ω—ã–π: 495‚Äì570 –Ω–º\n"
                    "- –ñ–µ–ª—Ç—ã–π: 570‚Äì590 –Ω–º\n"
                    "- –û—Ä–∞–Ω–∂–µ–≤—ã–π: 590‚Äì620 –Ω–º\n"
                    "- –ö—Ä–∞—Å–Ω—ã–π: 620‚Äì700 –Ω–º"
                )
            },
            "infrared": {
                "name": "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–π (IR)",
                "range": (700, 1000),
                "description": "–î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 700 –Ω–º –∏ –≤—ã—à–µ, –Ω–µ –≤–∏–¥–∏–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –≥–ª–∞–∑—É."
            }
        }

        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–ª–∏–Ω–µ –≤–æ–ª–Ω—ã:\n"
        for key, info in wavelength_ranges.items():
            min_wl, max_wl = info["range"]
            if min_wl <= wavelength <= max_wl:
                response += f"üü¢ –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã {wavelength} –Ω–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É: {info['name']}.\n{info['description']}\n"
                break
        else:
            response = f"üö´ –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã {wavelength} –Ω–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤."

        buttons = [
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="wavelength_info")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(response, reply_markup=keyboard)
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤–æ–ª–Ω—ã –≤ –Ω–∞–Ω–æ–º–µ—Ç—Ä–∞—Ö (–Ω–º).")

@dp.callback_query(F.data == "fluence_calc")
async def handle_fluence_calculation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–ª—é–µ–Ω—Å–∞."""
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_fluence_calculation_average_power_input)
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –º–æ—â–Ω–æ—Å—Ç—å –ª–∞–∑–µ—Ä–∞ (–í—Ç):")
    await callback.answer()

@dp.message(StateFilter(Form.waiting_for_fluence_calculation_average_power_input))
async def process_average_power(message: Message, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ª–∞–∑–µ—Ä–∞."""
    try:
        average_power = float(message.text)
        if average_power == 0:
            await message.answer("üö´ –ó–Ω–∞—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0.")
            return

        user_data[message.from_user.id] = {"average_power": average_power}
        await state.set_state(Form.waiting_for_fluence_calculation_repetition_rate_input)
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏–º–ø—É–ª—å—Å–æ–≤ –ª–∞–∑–µ—Ä–∞ (–ì—Ü):")
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–æ—â–Ω–æ—Å—Ç–∏.")

@dp.message(StateFilter(Form.waiting_for_fluence_calculation_repetition_rate_input))
async def process_repetition_rate(message: Message, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∏–º–ø—É–ª—å—Å–æ–≤ –ª–∞–∑–µ—Ä–∞."""
    try:
        repetition_rate = float(message.text)
        if repetition_rate == 0:
            await message.answer("üö´ –ó–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –Ω–µ–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0.")
            return

        user_data[message.from_user.id]["repetition_rate"] = repetition_rate
        await state.set_state(Form.waiting_for_fluence_calculation_spot_diameter_input)
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –ø—è—Ç–Ω–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (—Å–º):")
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã.")

@dp.message(StateFilter(Form.waiting_for_fluence_calculation_spot_diameter_input))
async def process_spot_diameter(message: Message, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–º–µ—Ç—Ä–∞ –ø—è—Ç–Ω–∞ –ª–∞–∑–µ—Ä–∞ –∏ —Ä–∞—Å—á–µ—Ç —Ñ–ª—é–µ–Ω—Å–∞."""
    try:
        spot_diameter = float(message.text)
        if spot_diameter == 0:
            await message.answer("üö´ –ó–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–∞ –Ω–µ–¥–æ–ª–∂–Ω–æ 0.")
            return
        
        await fluence_calculation(message)
        await state.clear()
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞.")

@dp.callback_query(F.data == "feedback")
async def handle_feedback(callback: types.CallbackQuery):
    await delete_previous_message(callback.message)

    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–∑—ã–≤–∞:\n\n"
        "1. –ê–Ω–æ–Ω–∏–º–Ω—ã–π üë§: –≤–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–∞—à–µ–≥–æ ID –∏ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å.\n\n"
        "2. –û–±—ã—á–Ω—ã–π üòÄ: –≤–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ ID –∏ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. "
        "–ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —ç—Ç–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
    )
    
    buttons = [
        [types.InlineKeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω—ã–π üë§", callback_data="feedback_type_anon")],
        [types.InlineKeyboardButton(text="–û–±—ã—á–Ω—ã–π üòÄ", callback_data="feedback_type_default")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "feedback_type_default")
async def handle_feedback_type_default(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
    user_id = callback.from_user.id
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_feedback_type_default_accept)
    await callback.message.answer("üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await callback.answer()
    user_data[user_id] = {}

@dp.message(StateFilter(Form.waiting_for_feedback_type_default_accept))
async def feedback_type_default_step2(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username

    user_data[user_id]["feedback_text"] = feedback_text

    confirmation_message = (
        f"–û—Ç–∑—ã–≤ –æ—Ç @{username} (id{user_id}):\n\n"
        f"–ù–∞–ø–∏—Å–∞–Ω {datetime.now()}\n"
        '–¢–∏–ø –æ—Ç–∑—ã–≤–∞: "–û–±—ã—á–Ω—ã–π üòÄ"\n\n'
        "–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:\n"
        f"{feedback_text}\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤? ü§î"
    )

    buttons = [
        [types.InlineKeyboardButton(text="–î–∞ üëç", callback_data="confirm_feedback")],
        [types.InlineKeyboardButton(text="–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å ‚úèÔ∏è", callback_data="edit_feedback")],
        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_feedback")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(confirmation_message, reply_markup=keyboard)
    await state.set_state(Form.waiting_for_feedback_confirmation)

@dp.callback_query(F.data == "edit_feedback")
async def edit_feedback(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    await callback.message.answer("üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ:")
    await state.set_state(Form.waiting_for_feedback_type_default_accept)

@dp.callback_query(F.data == "confirm_feedback")
async def confirm_feedback(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    username = callback.from_user.username

    feedback_text = user_data[user_id].get("feedback_text")
    is_anonymous = 0

    save_feedback(user_id, username, feedback_text, is_anonymous)
    buttons = [
        [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("ü§ó –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\nüìù –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üôè", reply_markup=keyboard)
    await state.clear()
    user_data.pop(user_id, None)

@dp.callback_query(F.data == "feedback_type_anon")
async def feedback_type_anon(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
    user_id = callback.from_user.id
    await delete_previous_message(callback.message)
    await state.set_state(Form.waiting_for_feedback_type_anon_accept)
    await callback.message.answer("üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤:")
    await callback.answer()
    user_data[user_id] = {}

@dp.message(StateFilter(Form.waiting_for_feedback_type_anon_accept))
async def feedback_type_anon_step2(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_id = message.from_user.id

    user_data[user_id]["feedback_text"] = feedback_text

    confirmation_message = (
        f"–û—Ç–∑—ã–≤ –æ—Ç –ê–Ω–æ–Ω–∏–º (id'—Å–∫—Ä—ã—Ç'):\n\n"
        f"–ù–∞–ø–∏—Å–∞–Ω {datetime.now()}\n"
        '–¢–∏–ø –æ—Ç–∑—ã–≤–∞: "–ê–Ω–æ–Ω–∏–º–Ω—ã–π üë§"\n\n'
        "–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:\n"
        f"{feedback_text}\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤? ü§î"
    )

    buttons = [
        [types.InlineKeyboardButton(text="–î–∞ üëç", callback_data="confirm_feedback_anon")],
        [types.InlineKeyboardButton(text="–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å ‚úèÔ∏è", callback_data="edit_feedback_anon")],
        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_feedback")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(confirmation_message, reply_markup=keyboard)
    await state.set_state(Form.waiting_for_feedback_anon_confirmation)

@dp.callback_query(F.data == "edit_feedback_anon")
async def edit_feedback_anon(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    await callback.message.answer("üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ:")
    await state.set_state(Form.waiting_for_feedback_type_anon_accept)

@dp.callback_query(F.data == "confirm_feedback_anon")
async def confirm_feedback_anon(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    feedback_text = user_data[user_id].get("feedback_text")
    is_anonymous = 1

    save_feedback(None, None, feedback_text, is_anonymous)
    buttons = [
        [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("ü§ó –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\nüìù –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üôè", reply_markup=keyboard)
    await state.clear()
    user_data.pop(user_id, None)

@dp.callback_query(F.data == "cancel_feedback")
async def cancel_feedback_anon(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    user_id = callback.from_user.id
    buttons = [
        [types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. ‚ùå", reply_markup=keyboard)
    await state.clear()
    user_data.pop(user_id, None)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await dp.start_polling(bot)

db_start()

if __name__ == "__main__":
    asyncio.run(main())
